version: 2.1
commands:
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install 
  install_nodejs:
   description: Install Node.js 13
   steps:
     - run:
         name: Install Node.js 13
         command: |
           curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
           sudo apt install -y nodejs
  destroy-environment:
    description: Destroy whole environment
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: "string"
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |

            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
  revert-migrations:
    description: Revert migration
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/TxYrjExGDEEPMqmm7MEgUk/migration_)
            # Logic for reverting the database state
            echo $SUCCESS
            if [[ $SUCCESS == 1 ]];
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm install
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Front-end test build
          command: |
              cd frontend
              npm install
              npm run test

      
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Back-end test build
          command: |
              cd backend
              npm install
              npm run test  
        
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Front-end scan build
          command: |
              cd frontend
              npm install
              npm audit fix --force --audit-level=critical
              npm audit fix --force --audit-level=critical
              npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Back-end scan build
          command: |
              cd backend
              npm install
              npm audit fix --force --audit-level=critical 
              npm audit fix --force --audit-level=critical
              npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yaml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yaml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Fetch public IP and append in inventory file
          command: |
            public_IP_backend=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo [web]  >> .circleci/ansible/inventory.txt;
            echo $public_IP_backend >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["f6:65:f3:9b:c0:38:ce:cf:4d:52:df:4e:58:da:3b:81"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install ansible.
          command: |
            apk add --update ansible
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update tar gzip ansible nodejs npm curl && \
            pip install awscli

      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible && \
            cat inventory.txt && \
            ansible-playbook -i inventory.txt configure-server.yaml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - install_awscli
      - install_nodejs
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "Hello there !!!"
              curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment

  deploy-frontend:
   docker:
     - image: cimg/base:stable
   steps:
     - checkout

     - add_ssh_keys:
          fingerprints: 
            - "f6:65:f3:9b:c0:38:ce:cf:4d:52:df:4e:58:da:3b:81"
     - attach_workspace:
         at: ~/    
     - install_awscli
     - install_nodejs
     - install_ansible
     - run:
         name: Install dependencies
         command: |
           cd frontend
           npm install
     - run:
         name: Get backend url
         command: |
           export BACKEND_IP=$(aws ec2 describe-instances \
             --filter Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --output text);
           export API_URL="http://${BACKEND_IP}:3030"
           echo "API_URL = ${API_URL}"
           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
           cat frontend/.env
     - run:
         name: Deploy frontend objects
         command: |
           cd frontend
           npm install
           npm run build
           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
     - destroy-environment
     - revert-migrations

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "f6:65:f3:9b:c0:38:ce:cf:4d:52:df:4e:58:da:3b:81"
      - attach_workspace:
         at: ~/
      - install_awscli
      - install_ansible
      - install_nodejs
      - run:
          name: Install npm dependencies
          command: |
            cd backend
            npm install

      - run:
          name: Deploy backend
          command: |
            cd backend
            npm run build
            cd ..
            cd .circleci/ansible/
            mkdir files
            cd files
            tar -C ../../../backend -czvf artifact.tar.gz .
            cd ../
            pwd
            ls -larth
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yaml

      - destroy-environment
      - revert-migrations
  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs


      - run:
          name: Backend smoke test.
          command: |
           export BACKEND_IP=$(aws ec2 describe-instances \
             --filters Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --output text)
           export API_URL="http://${BACKEND_IP}:3030"
           echo ${API_URL}
           curl -v -s $API_URL/api/status 
           if curl -s $API_URL/api/status | grep "ok"
           then
            exit 0
           else
            exit 1
           fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com/#/employees
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations
  cloudfront-update:
   docker:
     - image: cimg/base:stable
   steps:
     - checkout
     - install_nodejs
     - install_awscli
     - run:
         name: Save Old Workflow ID to kvdb.io
         command: |
           export OLD_WORKFLOW_ID=$(aws cloudformation \
                     list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                     --no-paginate --output text)
           echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
           curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
     - run:
         name: Update cloudfront distribution
         command: |
           aws cloudformation deploy \
             --template-file .circleci/files/cloudfront.yaml \
             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
             --stack-name InitialStack
     - destroy-environment
     - revert-migrations
  cleanup:
    docker:
      # Docker image 
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Get old stack workflow id
          command: |
           export STACKS=($(aws cloudformation list-stacks \
               --query "StackSummaries[*].StackName" \
               --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
           echo Stack names: "${STACKS[@]}"
           export OldWorkflowID=$(aws cloudformation \
                     list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                     --no-paginate --output text)
           echo Old Workflow ID: $OldWorkflowID 
           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
           then
             aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
             aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
           fi           
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]   
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]    
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]  
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]